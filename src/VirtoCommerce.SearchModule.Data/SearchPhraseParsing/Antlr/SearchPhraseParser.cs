//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SearchPhrase.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace VirtoCommerce.SearchModule.Data.SearchPhraseParsing.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class SearchPhraseParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, FD=2, VD=3, RD=4, AND=5, OR=6, RangeStart=7, RangeEnd=8, SimpleString=9, 
		QuotedString=10, Esc=11, DL=12;
	public const int
		RULE_searchPhrase = 0, RULE_expression = 1, RULE_phrase = 2, RULE_keyword = 3, 
		RULE_filters = 4, RULE_attributeFilter = 5, RULE_rangeFilter = 6, RULE_fieldName = 7, 
		RULE_attributeFilterValue = 8, RULE_rangeFilterValue = 9, RULE_range = 10, 
		RULE_rangeStart = 11, RULE_rangeEnd = 12, RULE_lower = 13, RULE_upper = 14, 
		RULE_negation = 15, RULE_string = 16;
	public static readonly string[] ruleNames = {
		"searchPhrase", "expression", "phrase", "keyword", "filters", "attributeFilter", 
		"rangeFilter", "fieldName", "attributeFilterValue", "rangeFilterValue", 
		"range", "rangeStart", "rangeEnd", "lower", "upper", "negation", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "':'", "','", null, "'AND'", "'OR'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "FD", "VD", "RD", "AND", "OR", "RangeStart", "RangeEnd", "SimpleString", 
		"QuotedString", "Esc", "DL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SearchPhrase.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SearchPhraseParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SearchPhraseParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SearchPhraseParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SearchPhraseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SearchPhraseParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DL() { return GetTokens(SearchPhraseParser.DL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DL(int i) {
			return GetToken(SearchPhraseParser.DL, i);
		}
		public SearchPhraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_searchPhrase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterSearchPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitSearchPhrase(this);
		}
	}

	[RuleVersion(0)]
	public SearchPhraseContext searchPhrase() {
		SearchPhraseContext _localctx = new SearchPhraseContext(Context, State);
		EnterRule(_localctx, 0, RULE_searchPhrase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DL) {
				{
				{
				State = 34;
				Match(DL);
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 40;
			expression(0);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DL) {
				{
				{
				State = 41;
				Match(DL);
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 47;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SearchPhraseParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DL() { return GetTokens(SearchPhraseParser.DL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DL(int i) {
			return GetToken(SearchPhraseParser.DL, i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}
	public partial class PhraseListExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PhraseContext[] phrase() {
			return GetRuleContexts<PhraseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PhraseContext phrase(int i) {
			return GetRuleContext<PhraseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DL() { return GetTokens(SearchPhraseParser.DL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DL(int i) {
			return GetToken(SearchPhraseParser.DL, i);
		}
		public PhraseListExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterPhraseListExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitPhraseListExpression(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SearchPhraseParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DL() { return GetTokens(SearchPhraseParser.DL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DL(int i) {
			return GetToken(SearchPhraseParser.DL, i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PhraseListExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 50;
			phrase();
			State = 59;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 52;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 51;
						Match(DL);
						}
						}
						State = 54;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==DL );
					State = 56;
					phrase();
					}
					} 
				}
				State = 61;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 94;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 92;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 62;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 66;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==DL) {
							{
							{
							State = 63;
							Match(DL);
							}
							}
							State = 68;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 69;
						Match(OR);
						State = 73;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==DL) {
							{
							{
							State = 70;
							Match(DL);
							}
							}
							State = 75;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 76;
						expression(4);
						}
						break;
					case 2:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 77;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 81;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==DL) {
							{
							{
							State = 78;
							Match(DL);
							}
							}
							State = 83;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 84;
						Match(AND);
						State = 88;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==DL) {
							{
							{
							State = 85;
							Match(DL);
							}
							}
							State = 90;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 91;
						expression(3);
						}
						break;
					}
					} 
				}
				State = 96;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PhraseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FiltersContext filters() {
			return GetRuleContext<FiltersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public PhraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_phrase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterPhrase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitPhrase(this);
		}
	}

	[RuleVersion(0)]
	public PhraseContext phrase() {
		PhraseContext _localctx = new PhraseContext(Context, State);
		EnterRule(_localctx, 4, RULE_phrase);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97;
				filters();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 6, RULE_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FiltersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeFilterContext attributeFilter() {
			return GetRuleContext<AttributeFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeFilterContext rangeFilter() {
			return GetRuleContext<RangeFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationContext negation() {
			return GetRuleContext<NegationContext>(0);
		}
		public FiltersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterFilters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitFilters(this);
		}
	}

	[RuleVersion(0)]
	public FiltersContext filters() {
		FiltersContext _localctx = new FiltersContext(Context, State);
		EnterRule(_localctx, 8, RULE_filters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 103;
				negation();
				}
			}

			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 106;
				attributeFilter();
				}
				break;
			case 2:
				{
				State = 107;
				rangeFilter();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FD() { return GetToken(SearchPhraseParser.FD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeFilterValueContext attributeFilterValue() {
			return GetRuleContext<AttributeFilterValueContext>(0);
		}
		public AttributeFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterAttributeFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitAttributeFilter(this);
		}
	}

	[RuleVersion(0)]
	public AttributeFilterContext attributeFilter() {
		AttributeFilterContext _localctx = new AttributeFilterContext(Context, State);
		EnterRule(_localctx, 10, RULE_attributeFilter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			fieldName();
			State = 111;
			Match(FD);
			State = 112;
			attributeFilterValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FD() { return GetToken(SearchPhraseParser.FD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeFilterValueContext rangeFilterValue() {
			return GetRuleContext<RangeFilterValueContext>(0);
		}
		public RangeFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterRangeFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitRangeFilter(this);
		}
	}

	[RuleVersion(0)]
	public RangeFilterContext rangeFilter() {
		RangeFilterContext _localctx = new RangeFilterContext(Context, State);
		EnterRule(_localctx, 12, RULE_rangeFilter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			fieldName();
			State = 115;
			Match(FD);
			State = 116;
			rangeFilterValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterFieldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitFieldName(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_fieldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeFilterValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VD() { return GetTokens(SearchPhraseParser.VD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VD(int i) {
			return GetToken(SearchPhraseParser.VD, i);
		}
		public AttributeFilterValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeFilterValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterAttributeFilterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitAttributeFilterValue(this);
		}
	}

	[RuleVersion(0)]
	public AttributeFilterValueContext attributeFilterValue() {
		AttributeFilterValueContext _localctx = new AttributeFilterValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_attributeFilterValue);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			@string();
			State = 125;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 121;
					Match(VD);
					State = 122;
					@string();
					}
					} 
				}
				State = 127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeFilterValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext[] range() {
			return GetRuleContexts<RangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range(int i) {
			return GetRuleContext<RangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VD() { return GetTokens(SearchPhraseParser.VD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VD(int i) {
			return GetToken(SearchPhraseParser.VD, i);
		}
		public RangeFilterValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeFilterValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterRangeFilterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitRangeFilterValue(this);
		}
	}

	[RuleVersion(0)]
	public RangeFilterValueContext rangeFilterValue() {
		RangeFilterValueContext _localctx = new RangeFilterValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_rangeFilterValue);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			range();
			State = 133;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 129;
					Match(VD);
					State = 130;
					range();
					}
					} 
				}
				State = 135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RangeStartContext rangeStart() {
			return GetRuleContext<RangeStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RD() { return GetToken(SearchPhraseParser.RD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RangeEndContext rangeEnd() {
			return GetRuleContext<RangeEndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DL() { return GetTokens(SearchPhraseParser.DL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DL(int i) {
			return GetToken(SearchPhraseParser.DL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LowerContext lower() {
			return GetRuleContext<LowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpperContext upper() {
			return GetRuleContext<UpperContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 20, RULE_range);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			rangeStart();
			State = 140;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 137;
					Match(DL);
					}
					} 
				}
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SimpleString || _la==QuotedString) {
				{
				State = 143;
				lower();
				}
			}

			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DL) {
				{
				{
				State = 146;
				Match(DL);
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 152;
			Match(RD);
			State = 156;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 153;
					Match(DL);
					}
					} 
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SimpleString || _la==QuotedString) {
				{
				State = 159;
				upper();
				}
			}

			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DL) {
				{
				{
				State = 162;
				Match(DL);
				}
				}
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 168;
			rangeEnd();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RangeStart() { return GetToken(SearchPhraseParser.RangeStart, 0); }
		public RangeStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterRangeStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitRangeStart(this);
		}
	}

	[RuleVersion(0)]
	public RangeStartContext rangeStart() {
		RangeStartContext _localctx = new RangeStartContext(Context, State);
		EnterRule(_localctx, 22, RULE_rangeStart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(RangeStart);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RangeEnd() { return GetToken(SearchPhraseParser.RangeEnd, 0); }
		public RangeEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterRangeEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitRangeEnd(this);
		}
	}

	[RuleVersion(0)]
	public RangeEndContext rangeEnd() {
		RangeEndContext _localctx = new RangeEndContext(Context, State);
		EnterRule(_localctx, 24, RULE_rangeEnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(RangeEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LowerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public LowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lower; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterLower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitLower(this);
		}
	}

	[RuleVersion(0)]
	public LowerContext lower() {
		LowerContext _localctx = new LowerContext(Context, State);
		EnterRule(_localctx, 26, RULE_lower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public UpperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upper; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterUpper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitUpper(this);
		}
	}

	[RuleVersion(0)]
	public UpperContext upper() {
		UpperContext _localctx = new UpperContext(Context, State);
		EnterRule(_localctx, 28, RULE_upper);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationContext : ParserRuleContext {
		public NegationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
	}

	[RuleVersion(0)]
	public NegationContext negation() {
		NegationContext _localctx = new NegationContext(Context, State);
		EnterRule(_localctx, 30, RULE_negation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SimpleString() { return GetToken(SearchPhraseParser.SimpleString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuotedString() { return GetToken(SearchPhraseParser.QuotedString, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISearchPhraseListener typedListener = listener as ISearchPhraseListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 32, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_la = TokenStream.LA(1);
			if ( !(_la==SimpleString || _la==QuotedString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,12,183,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,5,0,36,8,0,10,0,12,0,39,9,0,1,0,1,0,5,0,43,8,0,
		10,0,12,0,46,9,0,1,0,1,0,1,1,1,1,1,1,4,1,53,8,1,11,1,12,1,54,1,1,5,1,58,
		8,1,10,1,12,1,61,9,1,1,1,1,1,5,1,65,8,1,10,1,12,1,68,9,1,1,1,1,1,5,1,72,
		8,1,10,1,12,1,75,9,1,1,1,1,1,1,1,5,1,80,8,1,10,1,12,1,83,9,1,1,1,1,1,5,
		1,87,8,1,10,1,12,1,90,9,1,1,1,5,1,93,8,1,10,1,12,1,96,9,1,1,2,1,2,3,2,
		100,8,2,1,3,1,3,1,4,3,4,105,8,4,1,4,1,4,3,4,109,8,4,1,5,1,5,1,5,1,5,1,
		6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,5,8,124,8,8,10,8,12,8,127,9,8,1,9,1,
		9,1,9,5,9,132,8,9,10,9,12,9,135,9,9,1,10,1,10,5,10,139,8,10,10,10,12,10,
		142,9,10,1,10,3,10,145,8,10,1,10,5,10,148,8,10,10,10,12,10,151,9,10,1,
		10,1,10,5,10,155,8,10,10,10,12,10,158,9,10,1,10,3,10,161,8,10,1,10,5,10,
		164,8,10,10,10,12,10,167,9,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
		1,14,1,14,1,15,1,15,1,16,1,16,1,16,0,1,2,17,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,0,1,1,0,9,10,186,0,37,1,0,0,0,2,49,1,0,0,0,4,99,1,0,
		0,0,6,101,1,0,0,0,8,104,1,0,0,0,10,110,1,0,0,0,12,114,1,0,0,0,14,118,1,
		0,0,0,16,120,1,0,0,0,18,128,1,0,0,0,20,136,1,0,0,0,22,170,1,0,0,0,24,172,
		1,0,0,0,26,174,1,0,0,0,28,176,1,0,0,0,30,178,1,0,0,0,32,180,1,0,0,0,34,
		36,5,12,0,0,35,34,1,0,0,0,36,39,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,
		40,1,0,0,0,39,37,1,0,0,0,40,44,3,2,1,0,41,43,5,12,0,0,42,41,1,0,0,0,43,
		46,1,0,0,0,44,42,1,0,0,0,44,45,1,0,0,0,45,47,1,0,0,0,46,44,1,0,0,0,47,
		48,5,0,0,1,48,1,1,0,0,0,49,50,6,1,-1,0,50,59,3,4,2,0,51,53,5,12,0,0,52,
		51,1,0,0,0,53,54,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,56,1,0,0,0,56,
		58,3,4,2,0,57,52,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,
		94,1,0,0,0,61,59,1,0,0,0,62,66,10,3,0,0,63,65,5,12,0,0,64,63,1,0,0,0,65,
		68,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,66,1,0,0,0,69,
		73,5,6,0,0,70,72,5,12,0,0,71,70,1,0,0,0,72,75,1,0,0,0,73,71,1,0,0,0,73,
		74,1,0,0,0,74,76,1,0,0,0,75,73,1,0,0,0,76,93,3,2,1,4,77,81,10,2,0,0,78,
		80,5,12,0,0,79,78,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,
		84,1,0,0,0,83,81,1,0,0,0,84,88,5,5,0,0,85,87,5,12,0,0,86,85,1,0,0,0,87,
		90,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,88,1,0,0,0,91,
		93,3,2,1,3,92,62,1,0,0,0,92,77,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,
		95,1,0,0,0,95,3,1,0,0,0,96,94,1,0,0,0,97,100,3,8,4,0,98,100,3,6,3,0,99,
		97,1,0,0,0,99,98,1,0,0,0,100,5,1,0,0,0,101,102,3,32,16,0,102,7,1,0,0,0,
		103,105,3,30,15,0,104,103,1,0,0,0,104,105,1,0,0,0,105,108,1,0,0,0,106,
		109,3,10,5,0,107,109,3,12,6,0,108,106,1,0,0,0,108,107,1,0,0,0,109,9,1,
		0,0,0,110,111,3,14,7,0,111,112,5,2,0,0,112,113,3,16,8,0,113,11,1,0,0,0,
		114,115,3,14,7,0,115,116,5,2,0,0,116,117,3,18,9,0,117,13,1,0,0,0,118,119,
		3,32,16,0,119,15,1,0,0,0,120,125,3,32,16,0,121,122,5,3,0,0,122,124,3,32,
		16,0,123,121,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,
		17,1,0,0,0,127,125,1,0,0,0,128,133,3,20,10,0,129,130,5,3,0,0,130,132,3,
		20,10,0,131,129,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,
		0,134,19,1,0,0,0,135,133,1,0,0,0,136,140,3,22,11,0,137,139,5,12,0,0,138,
		137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,144,1,
		0,0,0,142,140,1,0,0,0,143,145,3,26,13,0,144,143,1,0,0,0,144,145,1,0,0,
		0,145,149,1,0,0,0,146,148,5,12,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,
		147,1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,149,1,0,0,0,152,156,5,
		4,0,0,153,155,5,12,0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,
		156,157,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,159,161,3,28,14,0,160,
		159,1,0,0,0,160,161,1,0,0,0,161,165,1,0,0,0,162,164,5,12,0,0,163,162,1,
		0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,168,1,0,0,0,
		167,165,1,0,0,0,168,169,3,24,12,0,169,21,1,0,0,0,170,171,5,7,0,0,171,23,
		1,0,0,0,172,173,5,8,0,0,173,25,1,0,0,0,174,175,3,32,16,0,175,27,1,0,0,
		0,176,177,3,32,16,0,177,29,1,0,0,0,178,179,5,1,0,0,179,31,1,0,0,0,180,
		181,7,0,0,0,181,33,1,0,0,0,21,37,44,54,59,66,73,81,88,92,94,99,104,108,
		125,133,140,144,149,156,160,165
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace VirtoCommerce.SearchModule.Data.SearchPhraseParsing.Antlr
